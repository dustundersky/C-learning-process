
算法是对指定问题求解步骤的一种描述，是指令的有限序列。
它应当满足以下特性：
(1）有穷性：一个算法必须在有穷步之后结束，即必须在有限时间内完成。
(2）确定性：算法的每一步必须有确切的定义，无二义性，且在任何条件下算法只有唯一一条执行路径，即对于相同的输入只能得出相同的输出。
（3）可行性：算法中的每一步都可以通过已经实现的基本运算的有限次执行得以实现。
（4）输入：一个算法具有零个或多个输入，这些输入取自特定的数据对象集合。
（5）输出：一个算法具有一个或多个输出，这些输出同输入之间存在某种特定的关系。

算法代表了对问题的求解方法，而程序则是算法在计算机上的特定实现。一个算法若用程序设计语言来描述，就是一个程序。


算法最终输出要求：
（1）正确性：算法的执行结果应当满足预先规定的功能和性能要求。正确性要求表明算法必须满足实际需求，达到解决实际问题的目标。
（2）可读性：一个算法应当思路清晰、层次分明、简单明了、易读易懂。
可读性要求表明算法主要是人与人之间交流解题思路和进行软件设计的工具，因此可读性必须要强。同时一个可读性强的算法，其程序的可维护性、可扩展性都要好得多，因此，许多时候人们往往在一定程度上牺牲效率来提高可读性。
（3）健壮性：当输入不合法数据时，应能适当处理，不至于引起严重后果。
健壮性要求表明算法要全面细致地考虑所有可能的边界情况，并对这些边界条件做出完备的处理，尽可能使算法没有意外的情况。
（4）高效性：有效使用存储空间和有较好的时间效率。高效性主要是指时间效率，即解决相同规模的问题时间尽可能短。






一般来说，数据结构上的基本操作主要有以下几种。
（1）查找：寻找满足特定条件的数据元素所在的位置。
（2）读取：读出指定位置上数据元素的内容。
（3）插入：在指定位置上添加新的数据元素。
（4）删除：删去指定位置上对应的数据元素。
（5）更新：修改某个数据元素的值。


算法的表示与描述
（1）自然语言算法描述：用人类自然语言（如中文、英文等）来描述算法，同时还可插入一些程序设计语言中的语句来描述，这种方法也称为非形式算法描述。其优点是不需要专门学习，任何人都可以直接阅读和理解，但直观性很差，复杂的算法难写难读。
（2）框图算法描述：这是一种图示法，可以采用方框图、流程图、N-S图等来描述算法，这种描述方法在算法研究的早期曾流行过。它的优点是直观、易懂，但用来描述比较复杂的算法就显得不够方便，也不够清晰简洁。
（3）伪代码算法描述：如类C语言算法描述。这种算法描述很像程序，但它不能直接在计算机上编译、运行。这种方法很容易编写、阅读算法，而且格式统一，结构清晰，专业设计人员经常使用类C语言来描述算法。
（4）高级程序设计语言编写的程序或函数：这是直接用高级语言来描述算法，它可在计算机上运行并获得结果，使给定问题能在有限时间内被求解，通常这种算法描述也称为程序。


算法的代价
一个算法的优劣，可以从该算法在计算机上运行的时间和所占存储空间来衡量和评判。
算法分析就是预先分析算法在实际执行时的时空代价指标。


当一个算法被转换成程序并在计算机上执行时，其运行所需要的时间一般取决于下列几个因素。
（1）硬件的速度。即主机本身运行速度，主要与CPU的主频和字长有关，也与主机系统采用的技术有关，如多机系统的运算速度一般比单机系统要快。
（2）实现算法的程序设计语言。实现算法的语言的级别越高，其执行效率相对就越低。
（3）编译程序所生成目标代码的质量。代码优化较好的编译程序所生成的程序质量较高。
（4）算法所采用的策略。采用不同设计思路与解题方法，其时空代价是不同的，一般情况下时间指标与空间指标常常是矛盾的两个方面。
（5）问题的规模。例如，求100以内的素数与求1 000以内的素数的执行时间必然不同。

